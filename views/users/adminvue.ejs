<!DOCTYPE html>
<html lang="en">

<head>
    <link rel="manifest" href="/js/pwa.webmanifest">
    <link rel="apple-touch-icon" href="/assets/pwa-icon-ios.png">
    <meta name="theme-color" content="#83c6be" />
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Zen Spots</title>
    <link href="/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://kit.fontawesome.com/c1f3f94452.js" crossorigin="anonymous"></script>
    <link href="/css/styles.css" rel="stylesheet">
    <link rel="icon" type="image/x-icon" href="favicon.ico" />
</head>
<body>
    <%- include('../partials/flash')%>
<div id="app" v-cloak>

    <create-zenspot-form />

</div>

<script src="https://cdn.jsdelivr.net/npm/vue@3"></script>
<script>
    const baseURL = "/admin";
    let app = Vue.createApp({
        //inside here is options object.

        //data is a function that needs to return variables
        data: function () {
            return {
                greeting: 'hello',
                isVisible: false
            }
        },
        //methods is an object of functions
        methods: {
            toggleBox() {
                this.isVisible = !this.isVisible;
            }
        }
    })

    app.component('create-zenspot-form', {
        template: `
        <h3>Admin Panel Using Vue</h3>
        <h4>Create Zenspot</h4>
        <div class="d-flex mb-3">
            <form class="needs-validation" novalidate >
                <div class="mb-3">
                    <input class="form-control" type="text" ref="post_title" v-model="title"  placeholder="Title" required/>
                </div>
                <div class="mb-3">
                    <input class="form-control" type="text" ref="post_location" v-model="location" placeholder="Location" />
                </div>
                <div class="mb-3">
                    <input class="form-control" type="text" ref="post_image" v-model="image" placeholder="ImageUrl" />
                </div>
                <div class="mb-3">
                    <textarea class="form-control" type="text" ref="post_description" v-model="description" placeholder="Description" ></textarea>
                </div>
                <button class="btn btn-primary" type="submit" @click="postData" >Create Zenspot</button>
            </form>
        </div>
        <h4>Create News</h4>
        <div class="d-flex mb-3">
            <form class="needs-validation" novalidate >
                <div class="mb-3">
                    <input class="form-control" type="text" ref="postNewsTitle" placeholder="News Title" required/>
                </div>
                <div class="mb-3">
                    <input class="form-control" type="text" ref="postNewsBody" placeholder="Body" required/>
                </div>
                <button class="btn btn-primary" type="submit" @click="createNews" >Create News</button>
            </form>
        </div>
        <a class="nav-link" href="/logout">Logout</a>
        `,
        data() {
            return {
                title: '',
                location: '',
                image: '',
                description: ''
            }
        },

        methods: {
            async postData() {
                const postData = {
                    title: this.title,
                    location: this.location,
                    image: this.image,
                    description: this.description
                };

                //find form
                let form = document.getElementsByTagName('form')[0];
                //Check if form is valid, store result in variable
                let chk_status = form.checkValidity();
                //report form validity to client
                form.reportValidity();
                //if valid execute createZenspot function
                if (chk_status) {
                    // try {
                    //     const res = await fetch(`${baseURL}/createZenspot`, {
                    //         method: "post",
                            // headers: {
                            //     "Content-Type": "application/json",
                            //     "x-access-token": "token-value",
                            // },
                    //         body: JSON.stringify(postData)
                    //     });
                    //     if (!res.ok) {
                    //         const message = `An error has occured: ${res.status} - ${res.statusText}`;
                    //         throw new Error(message);
                    //     }
                    // } catch (err) {
                    //     console.log(err)
                    //     this.postResult = err.message;

                    // }
                    // alert("Zenspot Created")
                     await fetch(`${baseURL}/createZenspot`, {
                            method: 'post',
                            headers: {
                                "Content-Type": "application/json",
                            },
                            body: JSON.stringify(postData)
                        })
                        .then(res => console.log(res.statusText));

                    
                }
            },
            async createNews() {
                const newsData = {
                    title: this.$refs.postNewsTitle.value,
                    body: this.$refs.postNewsBody.value
                };

                //find form
                let form = document.getElementsByTagName('form')[1];
                //Check if form is valid, store result in variable
                let chk_status = form.checkValidity();
                //report form validity to client
                form.reportValidity();
                //if valid execute createNews
                if (chk_status) {
                    try {
                        const res = await fetch(`${baseURL}/createNews`, {
                            method: "post",
                            headers: {
                                "Content-Type": "application/json",
                                "x-access-token": "token-value",
                            },
                            body: JSON.stringify(newsData)
                        });
                        if (!res.ok) {
                            const message = `An error has occured: ${res.status} - ${res.statusText}`;
                            throw new Error(message);
                        }
                    } catch (err) {
                        this.postResult = err.message;
                    }
                    alert("News Post Created")
                }
            }
        }
    })


    //mount vue application somwhere into html
    app.mount('#app')
</script>
<script src="/js/bootstrap.bundle.min.js">
</script>

<script src="/js/validateForms.js"></script>
<script src="/js/pwa.js"></script>
<script src="/js/main.js"></script>

</body>

</html>